from __future__ import print_function
import os

import xml.etree.cElementTree as etree

from distutils.dir_util import copy_tree

from ahl.testing.util import PkgTemplate

HERE = os.getcwd()


def test_ext_gcov_test(pytestconfig):
    """Create a package with a Python extension we can run ext_gcov_test on
    """
    test_dir = os.path.join(os.path.dirname(__file__), 'gcov_ext')
    with PkgTemplate(name='ahl.foo') as pkg:
        pkg.install_package('pytest-cov')
        copy_tree(test_dir, pkg.trunk_dir)
        pkg.run_with_coverage([os.path.join(pkg.trunk_dir, 'setup.py'),
                               'ext_gcov_test'],
                              pytestconfig, cd=pkg.trunk_dir)
        root = etree.parse(os.path.join(pkg.trunk_dir, 'gcov', 'coverage.xml'))
        (class_,) = root.findall('./packages/package/classes/class')
        assert class_.attrib['filename'] == 'src/ext.c'
        lines = dict((int(e.attrib['number']), int(e.attrib['hits']))
                     for e in class_.findall('./lines/line'))
        #print(str(lines))
        assert (lines[20], lines[21]) == (1, 1)    # fn_1 covered
        assert (lines[24], lines[25]) == (0, 0)    # fn_2 not covered


def test_ext_gcov_test_cython(pytestconfig):
    """Create a package with a Cython extension we can run ext_gcov_test on
    """
    test_dir = os.path.join(os.path.dirname(__file__), 'gcov_ext_cython')
    with PkgTemplate(name='ahl.foo') as pkg:
        pkg.install_package('pytest-cov')
        copy_tree(test_dir, pkg.trunk_dir)
        pkg.run_with_coverage([os.path.join(pkg.trunk_dir, 'setup.py'),
                               'ext_gcov_test'],
                              pytestconfig, cd=pkg.trunk_dir)
        root = etree.parse(os.path.join(pkg.trunk_dir, 'gcov', 'coverage.xml'))
        (class_,) = root.findall('./packages/package/classes/class')
        assert class_.attrib['filename'] == 'src/ext.pyx'
        lines = dict((int(e.attrib['number']), int(e.attrib['hits']))
                     for e in class_.findall('./lines/line'))
        assert lines[5] >= 1    # fn_1 covered
        assert lines[12] == 0   # fn_2 not covered
