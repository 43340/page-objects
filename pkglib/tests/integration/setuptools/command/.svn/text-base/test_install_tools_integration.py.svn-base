from __future__ import print_function
import os
import zipfile
from contextlib import closing

from pkg_resources import Distribution

from ahl.testing.util import PkgTemplate
from ahl.testing.pytest.util import svn_repo, workspace  # @UnusedImport # NOQA
from ahl.pkgutils.patches.six_moves import ExitStack    # @UnresolvedImport

HERE = os.getcwd()


def test_setup_instpckg(svn_repo, workspace, pytestconfig):
    """ Creates template, runs setup.py egg_info which should then call
    setup_instpckg
    """
    cfg = dict(setup_instpckg=dict(
        enabled='1',
        console_scripts='\n'.join([
                'python',
                'foo',
        ]),
        daemon_scripts='\n'.join([
            'daemonscripts/install-python.sql',
            'daemonscripts/install-foo.sql',
        ]),
    ))
    with PkgTemplate(name='ahl.foo-1.0.0.dev1', repo_base=svn_repo.uri,
                     **cfg) as pkg:
        pkg.install_package('pytest-cov')
        [pkg.run(cmd, capture=False, cd=HERE) for cmd in [
            ("svn import %s/%s %s -m 'initial import'" %
             (pkg.workspace, 'ahl.foo-1.0.0.dev1', pkg.vcs_uri)),
            'svn co %s/trunk %s/ahl.foo' % (pkg.vcs_uri, workspace.workspace),
            'mkdir %s/ahl.foo/daemonscripts' % workspace.workspace,
            ('echo "test123" > %s/ahl.foo/daemonscripts/install-python.sql' %
             workspace.workspace),
            ('echo "test345" > %s/ahl.foo/daemonscripts/install-foo.sql' %
             workspace.workspace),
        ]]
        print(pkg.run_with_coverage(['%s/ahl.foo/setup.py' %
                                     workspace.workspace, 'egg_info'],
                                    pytestconfig, cd=HERE))
        conf_dir = (workspace.workspace / 'ahl.foo' / 'ahl.foo.egg-info' /
                    'install_tools')
        assert conf_dir.isdir()
        id_file = conf_dir / 'id'
        assert id_file.isfile()
        assert id_file.lines(retain=False) == ['ahl.foo/1.0.0.dev1']

        inv_file = conf_dir / 'inventory.txt'
        assert inv_file.isfile()
        assert inv_file.lines(retain=False) == [
            '/app/AHL/ahl.foo',
            '/app/AHL/bin/python',
            '/app/AHL/bin/foo',
            '/app/AHL/sql/daemonscripts/install-python.sql',
            '/app/AHL/sql/daemonscripts/install-foo.sql',
        ]

        from ahl.pkgutils import setuptools
        install_tools = os.path.join(os.path.dirname(setuptools.__file__),
                                     'InstallTools')
        for filename in ['deinstall-files', 'install-files', 'lib.sh']:
            assert workspace.run('diff %s %s' %
                                 (os.path.join(conf_dir, filename),
                                  os.path.join(install_tools, filename)),
                                 capture=True) == ''

        # Check console scripts
        dots_root = conf_dir / 'app' / 'AHL'
        bin_dir = dots_root / 'bin'
        for script in ['python', 'foo']:
            link = bin_dir / script
            assert link.isfile()
            assert (link.lines(retain=False) ==
                    ['#!/bin/sh', '/app/AHL/ahl.foo/bin/%s $*' % script])

        # Check daemonscripts
        daemon_dir = dots_root / 'sql' / 'daemonscripts'
        script = daemon_dir / 'install-python.sql'
        assert script.isfile()
        assert script.lines(retain=False) == ['test123']

        script = daemon_dir / 'install-foo.sql'
        assert script.isfile()
        assert script.lines(retain=False) == ['test345']


def test_bdist_egg(svn_repo, workspace, pytestconfig):
    """ Creates template, runs setup.py bdist_egg which should then call
    setup_instpckg
    """
    cfg = dict(setup_instpckg=dict(
        enabled='1',
        console_scripts='\n'.join([
                'python',
                'foo',
        ]),
        daemon_scripts='\n'.join([
            'daemonscripts/install-python.sql',
            'daemonscripts/install-foo.sql',
        ]),
    ))
    with ExitStack() as stack:
        pkg = stack.enter_context(PkgTemplate(name='ahl.foo-1.0.0.dev1',
                                              repo_base=svn_repo.uri, **cfg))
        pkg.install_package('pytest-cov')
        [pkg.run(cmd, capture=False, cd=HERE) for cmd in [
            ("svn import %s/%s %s -m 'initial import'" %
             (pkg.workspace, 'ahl.foo-1.0.0.dev1', pkg.vcs_uri)),
            'svn co %s/trunk %s/ahl.foo' % (pkg.vcs_uri, workspace.workspace),
            'mkdir %s/ahl.foo/daemonscripts' % workspace.workspace,
            ('echo "test123" > %s/ahl.foo/daemonscripts/install-python.sql' %
             workspace.workspace),
            ('echo "test345" > %s/ahl.foo/daemonscripts/install-foo.sql' %
             workspace.workspace),
        ]]
        print(pkg.run_with_coverage(['%s/ahl.foo/setup.py' %
                                     workspace.workspace, 'bdist_egg'],
                                    pytestconfig, cd=HERE))

        egg = os.path.join(workspace.workspace, 'ahl.foo', 'dist',
                           Distribution(project_name='ahl.foo', version='1.0.0.dev1'
                                        ).egg_name() + '.egg')
        z = stack.enter_context(closing(zipfile.ZipFile(egg)))
        assert z.open('EGG-INFO/install_tools/id').readlines() == ['ahl.foo/1.0.0.dev1\n']

        assert z.open('EGG-INFO/install_tools/inventory.txt').readlines() == [
            '/app/AHL/ahl.foo\n',
            '/app/AHL/bin/python\n',
            '/app/AHL/bin/foo\n',
            '/app/AHL/sql/daemonscripts/install-python.sql\n',
            '/app/AHL/sql/daemonscripts/install-foo.sql',
        ]

        from ahl.pkgutils import setuptools
        install_tools = os.path.join(os.path.dirname(setuptools.__file__),
                                     'InstallTools')
        for filename in ['deinstall-files', 'install-files', 'lib.sh']:
            assert (z.open('EGG-INFO/install_tools/%s' % filename).readlines() ==
                    open(os.path.join(install_tools, filename), 'r').readlines())

        # Check console scripts
        for script in ['python', 'foo']:
            link = 'EGG-INFO/install_tools/app/AHL/bin/%s' % script
            assert (z.open(link).readlines() ==
                    ['#!/bin/sh\n', '/app/AHL/ahl.foo/bin/%s $*' % script])

        # Check daemonscripts
        script = 'EGG-INFO/install_tools/app/AHL/sql/daemonscripts/install-python.sql'
        assert z.open(script).readlines() == ['test123\n']

        script = 'EGG-INFO/install_tools/app/AHL/sql/daemonscripts/install-foo.sql'
        assert z.open(script).readlines() == ['test345\n']
